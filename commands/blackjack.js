
const {
    SlashCommandBuilder,
    EmbedBuilder,
    ActionRowBuilder,
    ButtonBuilder,
    ButtonStyle,
} = require("discord.js");
const fs = require("fs");

// ===== H·ªá th·ªëng coin =====
const USERS_FILE = "./users.json";

function loadUsers() {
    if (!fs.existsSync(USERS_FILE)) return {};
    return JSON.parse(fs.readFileSync(USERS_FILE));
}

function saveUsers(users) {
    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));
}

function getCoins(userId) {
    const users = loadUsers();
    if (!users[userId]) users[userId] = { coins: 1000 }; // m·∫∑c ƒë·ªãnh 1000 xu
    saveUsers(users);
    return users[userId].coins;
}

function updateCoins(userId, amount) {
    const users = loadUsers();
    if (!users[userId]) users[userId] = { coins: 1000 };
    users[userId].coins += amount;
    if (users[userId].coins < 0) users[userId].coins = 0;
    saveUsers(users);
}

// ===== Game Blackjack =====

// B·∫£ng Unicode cho 52 l√° b√†i
const playingCards = {
    "A‚ô†": "üÇ°", "2‚ô†": "üÇ¢", "3‚ô†": "üÇ£", "4‚ô†": "üÇ§", "5‚ô†": "üÇ•", "6‚ô†": "üÇ¶", "7‚ô†": "üÇß", "8‚ô†": "üÇ®", "9‚ô†": "üÇ©", "10‚ô†": "üÇ™", "J‚ô†": "üÇ´", "Q‚ô†": "üÇ≠", "K‚ô†": "üÇÆ",
    "A‚ô•": "üÇ±", "2‚ô•": "üÇ≤", "3‚ô•": "üÇ≥", "4‚ô•": "üÇ¥", "5‚ô•": "üÇµ", "6‚ô•": "üÇ∂", "7‚ô•": "üÇ∑", "8‚ô•": "üÇ∏", "9‚ô•": "üÇπ", "10‚ô•": "üÇ∫", "J‚ô•": "üÇª", "Q‚ô•": "üÇΩ", "K‚ô•": "üÇæ",
    "A‚ô¶": "üÉÅ", "2‚ô¶": "üÉÇ", "3‚ô¶": "üÉÉ", "4‚ô¶": "üÉÑ", "5‚ô¶": "üÉÖ", "6‚ô¶": "üÉÜ", "7‚ô¶": "üÉá", "8‚ô¶": "üÉà", "9‚ô¶": "üÉâ", "10‚ô¶": "üÉä", "J‚ô¶": "üÉã", "Q‚ô¶": "üÉç", "K‚ô¶": "üÉé",
    "A‚ô£": "üÉë", "2‚ô£": "üÉí", "3‚ô£": "üÉì", "4‚ô£": "üÉî", "5‚ô£": "üÉï", "6‚ô£": "üÉñ", "7‚ô£": "üÉó", "8‚ô£": "üÉò", "9‚ô£": "üÉô", "10‚ô£": "üÉö", "J‚ô£": "üÉõ", "Q‚ô£": "üÉù", "K‚ô£": "üÉû",
};

const suits = ["‚ô†", "‚ô•", "‚ô¶", "‚ô£"];
const values = ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"];

function drawCard() {
    const suit = suits[Math.floor(Math.random() * suits.length)];
    const value = values[Math.floor(Math.random() * values.length)];
    return { suit, value };
}

function calculateHandValue(hand) {
    let value = 0;
    let aces = 0;

    for (const card of hand) {
        if (["J", "Q", "K"].includes(card.value)) {
            value += 10;
        } else if (card.value === "A") {
            value += 11;
            aces++;
        } else {
            value += parseInt(card.value);
        }
    }

    while (value > 21 && aces > 0) {
        value -= 10;
        aces--;
    }
    return value;
}

// üëâ Format l√° b√†i b·∫±ng Unicode Playing Cards
function formatHand(hand) {
    return hand.map((c) => playingCards[`${c.value}${c.suit}`] || `${c.value}${c.suit}`).join(" ");
}

module.exports = {
    data: new SlashCommandBuilder()
        .setName("blackjack")
        .setDescription("üé∞ Ch∆°i Blackjack ƒë·∫∑t c∆∞·ª£c xu!")
        .addIntegerOption((option) =>
            option
                .setName("bet")
                .setDescription("S·ªë xu b·∫°n mu·ªën c∆∞·ª£c")
                .setRequired(true)
        ),

    async execute(interaction) {
        const bet = interaction.options.getInteger("bet");
        const userId = interaction.user.id;
        const balance = getCoins(userId);

        if (bet <= 0)
            return interaction.reply({ content: "‚ö†Ô∏è S·ªë xu c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!" });
        if (balance < bet)
            return interaction.reply({
                content: `‚ö†Ô∏è B·∫°n kh√¥ng ƒë·ªß xu! S·ªë d∆∞ hi·ªán t·∫°i: **${balance}** üí∞`,
            });

        updateCoins(userId, -bet); // tr·ª´ ti·ªÅn c∆∞·ª£c

        let playerHand = [drawCard(), drawCard()];
        let dealerHand = [drawCard(), drawCard()];

        let gameOver = false;

        const getEmbed = (showDealer = false, result = null) => {
            const playerValue = calculateHandValue(playerHand);
            const dealerValue = calculateHandValue(dealerHand);

            const embed = new EmbedBuilder()
                .setColor("DarkButNotBlack")
                .setTitle("üé¥ Blackjack üé¥")
                .addFields(
                    {
                        name: "üë§ B·∫°n",
                        value: `${formatHand(playerHand)}\n(ƒêi·ªÉm: **${playerValue}**)`,
                        inline: false,
                    },
                    {
                        name: "ü§ñ Dealer",
                        value: showDealer
                            ? `${formatHand(dealerHand)}\n(ƒêi·ªÉm: **${dealerValue}**)`
                            : `${formatHand([dealerHand[0]])} üÇ†`, // üÇ† = l√° √∫p
                        inline: false,
                    }
                )
                .setFooter({
                    text: `üí∞ C∆∞·ª£c: ${bet} | S·ªë d∆∞: ${getCoins(userId)}`,
                });

            if (result) embed.setDescription(result);
            return embed;
        };

        const row = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId("hit")
                .setLabel("üé¥ R√∫t b√†i")
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId("stand")
                .setLabel("üõë D·ª´ng")
                .setStyle(ButtonStyle.Secondary),
        );

        await interaction.reply({
            embeds: [getEmbed(false)],
            components: [row],
        });
        const message = await interaction.fetchReply();

        const collector = message.createMessageComponentCollector({
            time: 60000,
        });

        collector.on("collect", async (i) => {
            if (i.user.id !== userId)
                return i.reply({
                    content: "‚ö†Ô∏è ƒê√¢y kh√¥ng ph·∫£i game c·ªßa b·∫°n!",
                    flags: 64,
                });

            if (gameOver) return;

            if (i.customId === "hit") {
                playerHand.push(drawCard());
                const playerValue = calculateHandValue(playerHand);

                if (playerValue > 21) {
                    gameOver = true;
                    collector.stop();
                    return i.update({
                        embeds: [
                            getEmbed(true, `üí• B·∫°n **thua**! M·∫•t ${bet} xu ‚ùå`),
                        ],
                        components: [],
                    });
                }
                return i.update({ embeds: [getEmbed(false)], components: [row] });
            }

            if (i.customId === "stand") {
                const playerValue = calculateHandValue(playerHand);
                let dealerValue = calculateHandValue(dealerHand);

                while (dealerValue < 17) {
                    dealerHand.push(drawCard());
                    dealerValue = calculateHandValue(dealerHand);
                }

                gameOver = true;
                collector.stop();

                let result;
                if (dealerValue > 21 || playerValue > dealerValue) {
                    updateCoins(userId, bet * 2);
                    result = `üéâ B·∫°n **th·∫Øng**! Nh·∫≠n ${bet * 2} xu ‚úÖ`;
                } else if (playerValue === dealerValue) {
                    updateCoins(userId, bet);
                    result = `ü§ù H√≤a! Nh·∫≠n l·∫°i ${bet} xu üîÑ`;
                } else {
                    result = `üí• B·∫°n **thua**! M·∫•t ${bet} xu ‚ùå`;
                }

                return i.update({
                    embeds: [getEmbed(true, result)],
                    components: [],
                });
            }
        });

        collector.on("end", async () => {
            if (!gameOver) {
                gameOver = true;
                await message.edit({
                    embeds: [
                        getEmbed(true, `‚è∞ H·∫øt th·ªùi gian! B·∫°n ƒë√£ thua v√† m·∫•t ${bet} xu ‚ùå`),
                    ],
                    components: [],
                });
            }
        });
    },
};
