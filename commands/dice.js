const { SlashCommandBuilder, EmbedBuilder } = require("discord.js");
const { getCoins, updateCoins } = require("../economy"); // ch√∫ √Ω ƒë∆∞·ªùng d·∫´n

const diceEmoji = ["üé≤1", "üé≤2", "üé≤3", "üé≤4", "üé≤5", "üé≤6"];

module.exports = {
    data: new SlashCommandBuilder()
        .setName("dice")
        .setDescription("üé≤ Ch∆°i T√†i / X·ªâu v·ªõi xu")
        .addStringOption(opt =>
            opt.setName("bet_type")
                .setDescription("Ch·ªçn T√†i ho·∫∑c X·ªâu")
                .setRequired(true)
                .addChoices(
                    { name: "T√†i (11‚Äì18)", value: "tai" },
                    { name: "X·ªâu (3‚Äì10)", value: "xiu" }
                )
        )
        .addIntegerOption(opt =>
            opt.setName("bet")
                .setDescription("S·ªë xu b·∫°n mu·ªën c∆∞·ª£c")
                .setRequired(true)
        ),
    async execute(interaction) {
        const choice = interaction.options.getString("bet_type");
        const bet = interaction.options.getInteger("bet");
        const userId = interaction.user.id;

        const balance = getCoins(userId);
        if (bet <= 0)
            return interaction.reply("‚ö†Ô∏è S·ªë xu c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!");
        if (balance < bet)
            return interaction.reply(`‚ö†Ô∏è B·∫°n kh√¥ng ƒë·ªß xu! S·ªë d∆∞ hi·ªán t·∫°i: **${balance}** üí∞`);

        updateCoins(userId, -bet);

        let embed = new EmbedBuilder()
            .setColor("Yellow")
            .setTitle("üé≤ Dice - T√†i / X·ªâu")
            .setDescription(`üé≤ ƒêang l·∫Øc x√∫c x·∫Øc...\n\n‚ùî ‚ùî ‚ùî`);

        const reply = await interaction.reply({ embeds: [embed], fetchReply: true });

        let frame = 0;
        const interval = setInterval(async () => {
            frame++;
            const rand1 = Math.floor(Math.random() * 6);
            const rand2 = Math.floor(Math.random() * 6);
            const rand3 = Math.floor(Math.random() * 6);

            embed.setDescription(
                `üé≤ ƒêang l·∫Øc x√∫c x·∫Øc...\n\n${diceEmoji[rand1]} ${diceEmoji[rand2]} ${diceEmoji[rand3]}`
            );
            await interaction.editReply({ embeds: [embed] });

            if (frame >= 5) {
                clearInterval(interval);

                const dice = [
                    Math.floor(Math.random() * 6) + 1,
                    Math.floor(Math.random() * 6) + 1,
                    Math.floor(Math.random() * 6) + 1
                ];
                const total = dice.reduce((a, b) => a + b, 0);

                let result, reward = 0;
                if ((choice === "tai" && total >= 11) || (choice === "xiu" && total <= 10)) {
                    reward = bet * 2;
                    updateCoins(userId, reward);
                    result = `üéâ B·∫°n ch·ªçn **${choice === "tai" ? "T√†i" : "X·ªâu"}** v√† th·∫Øng! Nh·∫≠n **${reward}** xu ‚úÖ`;
                } else {
                    result = `üí• B·∫°n ch·ªçn **${choice === "tai" ? "T√†i" : "X·ªâu"}** nh∆∞ng thua m·∫•t **${bet}** xu ‚ùå`;
                }

                const finalBalance = getCoins(userId);

                embed = new EmbedBuilder()
                    .setColor("Random")
                    .setTitle("üé≤ Dice - T√†i / X·ªâu")
                    .setDescription(
                        `üé≤ K·∫øt qu·∫£: ${diceEmoji[dice[0]-1]} ${diceEmoji[dice[1]-1]} ${diceEmoji[dice[2]-1]}\n` +
                        `‚û°Ô∏è T·ªïng = **${total}**`
                    )
                    .addFields(
                        { name: "üì¶ K·∫øt qu·∫£", value: result, inline: false },
                        { name: "üí≥ S·ªë d∆∞ m·ªõi", value: `${finalBalance} xu`, inline: true }
                    );

                await interaction.editReply({ embeds: [embed] });
            }
        }, 700);
    }
};
