const {
    SlashCommandBuilder,
    EmbedBuilder,
    ActionRowBuilder,
    ButtonBuilder,
    ButtonStyle,
    ModalBuilder,
    TextInputBuilder,
    TextInputStyle,
    InteractionType
} = require("discord.js");
const fs = require("fs");

const USERS_FILE = "./users.json";

// ===== Helper: Safe file read/write =====
function loadUsers() {
    if (!fs.existsSync(USERS_FILE)) return {};
    try {
        return JSON.parse(fs.readFileSync(USERS_FILE));
    } catch (e) {
        console.error("‚ö†Ô∏è L·ªói ƒë·ªçc users.json:", e);
        return {};
    }
}

function saveUsers(users) {
    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));
}

function getCoins(userId) {
    const users = loadUsers();
    if (!users[userId]) users[userId] = { coins: 1000, wins: 0, losses: 0, earnings: 0 };
    saveUsers(users);
    return users[userId].coins;
}

function updateCoins(userId, amount) {
    const users = loadUsers();
    if (!users[userId]) users[userId] = { coins: 1000, wins: 0, losses: 0, earnings: 0 };
    users[userId].coins += amount;
    if (users[userId].coins < 0) users[userId].coins = 0;
    saveUsers(users);
}

// ===== Odds =====
const HORSE_ODDS = {
    1: 2, // Ng·ª±a 1 tr·∫£ x2
    2: 3, // Ng·ª±a 2 tr·∫£ x3
    3: 4, // Ng·ª±a 3 tr·∫£ x4
    4: 6  // Ng·ª±a 4 tr·∫£ x6
};

// ===== Game State (multi-room) =====
const raceRooms = new Map(); // Map<channelId, {raceInProgress, bets, timer, message}>

module.exports = {
    data: new SlashCommandBuilder()
        .setName("horserace")
        .setDescription("üèá ƒêua ng·ª±a (multiplayer)"),
    async execute(interaction) {
        const channelId = interaction.channel.id;

        // N·∫øu ph√≤ng ƒë√£ c√≥ ƒëua ƒëang ch·∫°y th√¨ t·ª´ ch·ªëi
        if (raceRooms.has(channelId) && raceRooms.get(channelId).raceInProgress) {
            return interaction.reply("‚ö†Ô∏è Cu·ªôc ƒëua ·ªü ph√≤ng n√†y ƒëang di·ªÖn ra, vui l√≤ng ch·ªù!");
        }

        // Kh·ªüi t·∫°o state m·ªõi cho ph√≤ng
        raceRooms.set(channelId, {
            raceInProgress: true,
            bets: {},
            timer: null,
            message: null
        });

        const room = raceRooms.get(channelId);

        const row = new ActionRowBuilder().addComponents(
            new ButtonBuilder().setCustomId("horse1").setLabel("Ng·ª±a 1").setStyle(ButtonStyle.Primary),
            new ButtonBuilder().setCustomId("horse2").setLabel("Ng·ª±a 2").setStyle(ButtonStyle.Primary),
            new ButtonBuilder().setCustomId("horse3").setLabel("Ng·ª±a 3").setStyle(ButtonStyle.Primary),
            new ButtonBuilder().setCustomId("horse4").setLabel("Ng·ª±a 4").setStyle(ButtonStyle.Primary)
        );

        let timeLeft = 30;
        const embed = new EmbedBuilder()
            .setTitle("üèá ƒêua ng·ª±a b·∫Øt ƒë·∫ßu!")
            .setColor("Purple")
            .setDescription(
                `Ch·ªçn ng·ª±a b·∫°n mu·ªën ƒë·∫∑t c∆∞·ª£c b·∫±ng n√∫t b√™n d∆∞·ªõi.\nB·∫°n c√≥ **${timeLeft} gi√¢y** ƒë·ªÉ tham gia!\n\n` +
                `üìä T·ªâ l·ªá tr·∫£ th∆∞·ªüng:\n` +
                `üêé1 ‚Üí x2\nüêé2 ‚Üí x3\nüêé3 ‚Üí x4\nüêé4 ‚Üí x6\n\n` +
                `üå± Ng∆∞·ªùi tham gia c∆∞·ª£c\n*Ch∆∞a c√≥ ai*`
            );

        const msg = await interaction.reply({ embeds: [embed], components: [row], fetchReply: true });
        room.message = msg;

        // Collector button
        const collector = msg.createMessageComponentCollector({ time: 30000 });

        collector.on("collect", async i => {
            const userId = i.user.id;
            if (room.bets[userId]) {
                return i.reply({ content: "‚ö†Ô∏è B·∫°n ƒë√£ ƒë·∫∑t c∆∞·ª£c r·ªìi!", ephemeral: true });
            }

            const horse = parseInt(i.customId.replace("horse", ""));

            // G·ª≠i modal nh·∫≠p s·ªë xu
            const modal = new ModalBuilder()
                .setCustomId(`betmodal_${horse}_${channelId}`)
                .setTitle(`üêé Ng·ª±a ${horse} - Nh·∫≠p s·ªë xu c∆∞·ª£c`);

            const betInput = new TextInputBuilder()
                .setCustomId("betamount")
                .setLabel("Nh·∫≠p s·ªë xu b·∫°n mu·ªën c∆∞·ª£c")
                .setPlaceholder("V√≠ d·ª•: 200")
                .setStyle(TextInputStyle.Short)
                .setRequired(true);

            modal.addComponents(new ActionRowBuilder().addComponents(betInput));
            await i.showModal(modal);
        });

        // X·ª≠ l√Ω modal submit
        const modalHandler = async modalInteraction => {
            if (modalInteraction.type !== InteractionType.ModalSubmit) return;
            if (!modalInteraction.customId.startsWith("betmodal_")) return;

            const parts = modalInteraction.customId.split("_");
            const horse = parseInt(parts[1]);
            const modalChannelId = parts[2];
            if (modalChannelId !== channelId) return; // ƒë·∫£m b·∫£o ƒë√∫ng ph√≤ng

            const userId = modalInteraction.user.id;
            if (room.bets[userId]) {
                return modalInteraction.reply({ content: "‚ö†Ô∏è B·∫°n ƒë√£ ƒë·∫∑t c∆∞·ª£c r·ªìi!", ephemeral: true });
            }

            const betStr = modalInteraction.fields.getTextInputValue("betamount");
            const bet = parseInt(betStr);

            if (isNaN(bet) || bet <= 0) {
                return modalInteraction.reply({ content: "‚ö†Ô∏è S·ªë xu c∆∞·ª£c ph·∫£i > 0!", ephemeral: true });
            }

            const balance = getCoins(userId);
            if (balance < bet) {
                return modalInteraction.reply({ content: `‚ö†Ô∏è B·∫°n kh√¥ng ƒë·ªß xu! (c·∫ßn ${bet}, c√≥ ${balance})`, ephemeral: true });
            }

            updateCoins(userId, -bet);
            room.bets[userId] = { horse, bet };

            // C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi ch∆°i
            const betLines = Object.entries(room.bets)
                .map(([uid, { horse, bet }]) => `‚Ä¢ <@${uid}> c∆∞·ª£c **${bet}** xu cho üêé${horse} (x${HORSE_ODDS[horse]})`)
                .join("\n");

            const newEmbed = EmbedBuilder.from(embed).setDescription(
                `Ch·ªçn ng·ª±a b·∫°n mu·ªën ƒë·∫∑t c∆∞·ª£c b·∫±ng n√∫t b√™n d∆∞·ªõi.\nB·∫°n c√≥ **${timeLeft} gi√¢y** ƒë·ªÉ tham gia!\n\nüìä T·ªâ l·ªá tr·∫£ th∆∞·ªüng:\nüêé1 ‚Üí x2\nüêé2 ‚Üí x3\nüêé3 ‚Üí x4\nüêé4 ‚Üí x6\n\nüå± Ng∆∞·ªùi tham gia c∆∞·ª£c\n${betLines}`
            );
            await msg.edit({ embeds: [newEmbed], components: [row] });

            await modalInteraction.reply({ content: `‚úÖ B·∫°n ƒë√£ c∆∞·ª£c **${bet}** xu cho üêé${horse}! (x${HORSE_ODDS[horse]})`, ephemeral: true });
        };

        interaction.client.on("interactionCreate", modalHandler);

        // ƒê·∫øm ng∆∞·ª£c
        room.timer = setInterval(async () => {
            timeLeft--;
            if (timeLeft <= 0) {
                clearInterval(room.timer);
                return;
            }

            const betLines = Object.entries(room.bets).length > 0
                ? Object.entries(room.bets)
                    .map(([uid, { horse, bet }]) => `‚Ä¢ <@${uid}> c∆∞·ª£c **${bet}** xu cho üêé${horse} (x${HORSE_ODDS[horse]})`)
                    .join("\n")
                : "*Ch∆∞a c√≥ ai*";

            const newEmbed = EmbedBuilder.from(embed).setDescription(
                `Ch·ªçn ng·ª±a b·∫°n mu·ªën ƒë·∫∑t c∆∞·ª£c b·∫±ng n√∫t b√™n d∆∞·ªõi.\nB·∫°n c√≥ **${timeLeft} gi√¢y** ƒë·ªÉ tham gia!\n\nüìä T·ªâ l·ªá tr·∫£ th∆∞·ªüng:\nüêé1 ‚Üí x2\nüêé2 ‚Üí x3\nüêé3 ‚Üí x4\nüêé4 ‚Üí x6\n\nüå± Ng∆∞·ªùi tham gia c∆∞·ª£c\n${betLines}`
            );
            await msg.edit({ embeds: [newEmbed], components: [row] }).catch(() => {});
        }, 1000);

        // Khi h·∫øt 30s
        collector.on("end", async () => {
            clearInterval(room.timer);
            interaction.client.removeListener("interactionCreate", modalHandler);

            // üî¥ ·∫®n to√†n b·ªô n√∫t ch·ªçn ng·ª±a
            await msg.edit({ components: [] }).catch(() => {});

            if (Object.keys(room.bets).length === 0) {
                raceRooms.delete(channelId);
                return interaction.followUp("‚ùå Kh√¥ng c√≥ ai tham gia, hu·ª∑ cu·ªôc ƒëua.");
            }

            await startRace(interaction, room);
        });
    }
};

// ===== Race Logic =====
async function startRace(interaction, room) {
    const trackLength = 20;
    let positions = [0, 0, 0, 0];
    let skipTurn = [false, false, false, false];
    const channelId = interaction.channel.id;

    const raceEmbed = new EmbedBuilder()
        .setTitle("üèá ƒêua Ng·ª±a")
        .setColor("Blue")
        .setDescription("B·∫Øt ƒë·∫ßu cu·ªôc ƒëua...");

    const raceMsg = room.message;
    await raceMsg.edit({ embeds: [raceEmbed] });

    function renderRace(eventMessage = null) {
        const horseIcons = ["üêé", "üèá", "üê¥", "üêéüí®"];
        let lines = positions.map((pos, i) => {
            const icon = horseIcons[Math.floor(Math.random() * horseIcons.length)];
            const track = "‚îÄ".repeat(Math.max(0, pos)) + icon + "‚îÄ".repeat(Math.max(0, trackLength - pos));
            return `${i + 1}Ô∏è‚É£ | ${track}üèÅ`;
        });
        if (eventMessage) lines.push(`\n${eventMessage}`);
        return lines.join("\n");
    }

    let winner = null;
    const raceInterval = setInterval(async () => {
        if (winner) return;

        let eventMessage = null;

        for (let i = 0; i < positions.length; i++) {
            if (skipTurn[i]) {
                skipTurn[i] = false;
                continue;
            }

            positions[i] += Math.random() < 0.5 ? 1 : 0;

            if (Math.random() < 0.2) {
                const roll = Math.random();
                if (roll < 0.5) {
                    positions[i] += 2;
                    eventMessage = `‚ö° Ng·ª±a ${i + 1} tƒÉng t·ªëc, nh·∫£y v·ªçt 2 b∆∞·ªõc!`;
                } else if (roll < 0.85) {
                    skipTurn[i] = true;
                    eventMessage = `üí§ Ng·ª±a ${i + 1} h·ª•t h∆°i, ngh·ªâ 1 l∆∞·ª£t!`;
                } else {
                    positions[i] = Math.max(0, positions[i] - 1);
                    eventMessage = `üòµ Ng·ª±a ${i + 1} tr∆∞·ª£t ch√¢n, l√πi l·∫°i 1 b∆∞·ªõc!`;
                }
            }
        }

        let winners = [];
        for (let i = 0; i < positions.length; i++) {
            if (positions[i] >= trackLength) winners.push(i + 1);
        }

        if (winners.length > 0) {
            winner = winners[Math.floor(Math.random() * winners.length)];
            clearInterval(raceInterval);

            setTimeout(async () => {
                const users = loadUsers();
                let resultLines = [];

                for (let [uid, { horse, bet }] of Object.entries(room.bets)) {
                    if (!users[uid]) users[uid] = { coins: 1000, wins: 0, losses: 0, earnings: 0 };

                    let text = "";
                    if (horse === winner) {
                        const reward = bet * HORSE_ODDS[horse];
                        users[uid].coins += reward;   // c·ªông tr·ª±c ti·∫øp
                        users[uid].wins++;
                        users[uid].earnings += reward;

                        text = `‚úÖ <@${uid}> ch·ªçn **üêé${horse}** ‚Üí Th·∫Øng! Nh·∫≠n **${reward}** xu (x${HORSE_ODDS[horse]})`;
                    } else {
                        users[uid].losses++;
                        text = `‚ùå <@${uid}> ch·ªçn **üêé${horse}** ‚Üí Thua m·∫•t **${bet}** xu`;
                    }

                    const finalBalance = users[uid].coins;
                    text += ` (S·ªë d∆∞: ${finalBalance}üí∞)`;
                    resultLines.push(text);
                }

                saveUsers(users); // ch·ªâ l∆∞u 1 l·∫ßn cu·ªëi

                raceEmbed
                    .setTitle("üèÜ K·∫øt Qu·∫£ Cu·ªôc ƒêua")
                    .setColor("Green")
                    .setDescription(renderRace())
                    .setFields(
                        { name: "üê¥ Ng·ª±a th·∫Øng", value: `Ng·ª±a s·ªë **${winner}** (x${HORSE_ODDS[winner]})` },
                        { name: "üì¶ K·∫øt qu·∫£ c∆∞·ª£c", value: resultLines.join("\n") }
                    );

                await raceMsg.edit({
                    embeds: [raceEmbed],
                    components: []
                });

                raceRooms.delete(channelId);
            }, 1500);
        } else {
            raceEmbed
                .setTitle("üèá ƒêua Ng·ª±a ƒêang Di·ªÖn Ra...")
                .setColor("Blue")
                .setFields([])
                .setDescription(renderRace(eventMessage));
            await raceMsg.edit({ embeds: [raceEmbed] }).catch(() => {});
        }
    }, 1500);
}
