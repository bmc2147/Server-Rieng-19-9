const {
    SlashCommandBuilder,
    EmbedBuilder,
    ActionRowBuilder,
    ButtonBuilder,
    ButtonStyle,
    ModalBuilder,
    TextInputBuilder,
    TextInputStyle
} = require("discord.js");
const fs = require("fs");

const USERS_FILE = "./users.json";

// ==================== H√ÄM QU·∫¢N L√ù NG∆Ø·ªúI D√ôNG ====================
function loadUsers() {
    if (!fs.existsSync(USERS_FILE)) return {};
    return JSON.parse(fs.readFileSync(USERS_FILE));
}

function saveUsers(users) {
    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));
}

// ==================== C√ÅC CON V·∫¨T ====================
const options = [
    { name: "B·∫ßu", value: "bau", emoji: "üéÉ" },
    { name: "Cua", value: "cua", emoji: "ü¶Ä" },
    { name: "C√°", value: "ca", emoji: "üêü" },
    { name: "Nai", value: "nai", emoji: "ü¶å" },
    { name: "T√¥m", value: "tom", emoji: "ü¶ê" },
    { name: "G√†", value: "ga", emoji: "üêì" }
];

module.exports = {
    data: new SlashCommandBuilder()
        .setName("baucua")
        .setDescription("üé≤ Ch∆°i B·∫ßu Cua truy·ªÅn th·ªëng VN"),

    async execute(interaction) {
        const userId = interaction.user.id;
        const users = loadUsers();

        // T·∫°o t√†i kho·∫£n m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
        if (!users[userId]) {
            users[userId] = { coins: 1000, lastDaily: null };
            saveUsers(users);
        }

        // Embed ch√≠nh
        const mainEmbed = new EmbedBuilder()
            .setColor("Yellow")
            .setTitle("üé≤ B·∫ßu Cua üé≤")
            .setDescription(
                "üëâ Ch·ªçn con v·∫≠t b·∫°n mu·ªën c∆∞·ª£c b·∫±ng c√°ch b·∫•m n√∫t b√™n d∆∞·ªõi üêìü¶ÄüéÉüêüü¶åü¶ê\nSau ƒë√≥ nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c üí∞"
            )
            .setFooter({ text: `Ng∆∞·ªùi ch∆°i: ${interaction.user.username}` });

        // Hai h√†ng n√∫t ch·ªçn con v·∫≠t
        const row1 = new ActionRowBuilder().addComponents(
            ...options.slice(0, 3).map(opt =>
                new ButtonBuilder()
                    .setCustomId(`baucua_${opt.value}`)
                    .setLabel(opt.name)
                    .setEmoji(opt.emoji)
                    .setStyle(ButtonStyle.Primary)
            )
        );

        const row2 = new ActionRowBuilder().addComponents(
            ...options.slice(3, 6).map(opt =>
                new ButtonBuilder()
                    .setCustomId(`baucua_${opt.value}`)
                    .setLabel(opt.name)
                    .setEmoji(opt.emoji)
                    .setStyle(ButtonStyle.Primary)
            )
        );

        // G·ª≠i message ban ƒë·∫ßu
        const gameMessage = await interaction.reply({
            embeds: [mainEmbed],
            components: [row1, row2],
            fetchReply: true
        });

        // ==================== X·ª¨ L√ù L∆Ø·ª¢T CH∆†I ====================
        const filter = i => i.customId.startsWith("baucua_") && i.user.id === userId;
        const collector = gameMessage.createMessageComponentCollector({
            filter,
            time: 30000,
            max: 1
        });

        collector.on("collect", async i => {
            const choice = i.customId.replace("baucua_", "");
            const selectedOpt = options.find(o => o.value === choice);

            // Modal nh·∫≠p ti·ªÅn c∆∞·ª£c
            const modal = new ModalBuilder()
                .setCustomId(`betmodal_${choice}`)
                .setTitle("üí∞ ƒê·∫∑t c∆∞·ª£c");

            const betInput = new TextInputBuilder()
                .setCustomId("bet_amount")
                .setLabel("Nh·∫≠p s·ªë coin b·∫°n mu·ªën c∆∞·ª£c")
                .setStyle(TextInputStyle.Short)
                .setPlaceholder("V√≠ d·ª•: 100")
                .setRequired(true);

            modal.addComponents(new ActionRowBuilder().addComponents(betInput));
            await i.showModal(modal);

            // Ch·ªù modal submit
            const modalFilter = m => m.customId.startsWith("betmodal_") && m.user.id === userId;
            i.awaitModalSubmit({ filter: modalFilter, time: 30000 })
                .then(async modalSubmit => {
                    await modalSubmit.deferUpdate();

                    const bet = parseInt(modalSubmit.fields.getTextInputValue("bet_amount"));
                    if (isNaN(bet) || bet <= 0) {
                        return i.followUp({ content: "‚ö†Ô∏è S·ªë coin c∆∞·ª£c kh√¥ng h·ª£p l·ªá!", ephemeral: true });
                    }
                    if (users[userId].coins < bet) {
                        return i.followUp({ content: "‚ùå B·∫°n kh√¥ng ƒë·ªß coin ƒë·ªÉ c∆∞·ª£c!", ephemeral: true });
                    }

                    // Tr·ª´ ti·ªÅn c∆∞·ª£c
                    users[userId].coins -= bet;

                    // üé∞ Hi·ªáu ·ª©ng quay
                    let delay = 200;
                    for (let k = 0; k < 6; k++) {
                        const spinResult = Array.from({ length: 3 }, () =>
                            options[Math.floor(Math.random() * options.length)].emoji
                        );

                        mainEmbed.setDescription(
                            `üé∞ ƒêang quay...\n${spinResult.join(" | ")}\nüí∞ ƒêang c∆∞·ª£c: ${bet} coin`
                        );

                        await gameMessage.edit({ embeds: [mainEmbed], components: [] });
                        await new Promise(r => setTimeout(r, delay));
                        delay += 150;
                    }

                    // üéØ K·∫øt qu·∫£ cu·ªëi
                    const result = Array.from({ length: 3 }, () =>
                        options[Math.floor(Math.random() * options.length)]
                    );

                    const winCount = result.filter(r => r.value === choice).length;
                    let resultText = `üéØ K·∫øt qu·∫£: ${result.map(r => r.emoji).join(" | ")}\n\n`;

                    if (winCount > 0) {
                        const win = bet * winCount;
                        users[userId].coins += bet + win;
                        resultText += `üéâ Con b·∫°n ch·ªçn ${selectedOpt.emoji} xu·∫•t hi·ªán **${winCount} l·∫ßn**!\nB·∫°n th·∫Øng **${win} coin**!\nüí∞ S·ªë d∆∞: **${users[userId].coins}**`;
                        mainEmbed.setColor("Green");
                    } else {
                        resultText += `üò¢ Kh√¥ng c√≥ con b·∫°n ch·ªçn.\nB·∫°n m·∫•t **${bet} coin**.\nüí∞ S·ªë d∆∞: **${users[userId].coins}**`;
                        mainEmbed.setColor("Red");
                    }

                    saveUsers(users);

                    // Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng, kh√¥ng c√≥ n√∫t ch∆°i l·∫°i
                    mainEmbed.setDescription(resultText);
                    await gameMessage.edit({ embeds: [mainEmbed], components: [] });
                })
                .catch(() => {
                    i.followUp({ content: "‚è∞ H·∫øt th·ªùi gian ƒë·∫∑t c∆∞·ª£c!", ephemeral: true });
                });
        });
    }
};
