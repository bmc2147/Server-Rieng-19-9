const {
  SlashCommandBuilder,
  EmbedBuilder,
} = require("discord.js");
const fs = require("fs");

// ==================== FILE CONFIG ==================== //
const USERS_FILE = "./users.json";
const JACKPOT_FILE = "./jackpot.json";

// ==================== JSON HELPER ==================== //
function loadJSON(filePath, defaultValue = {}) {
  if (!fs.existsSync(filePath)) {
    fs.writeFileSync(filePath, JSON.stringify(defaultValue, null, 2));
    return defaultValue;
  }
  try {
    return JSON.parse(fs.readFileSync(filePath));
  } catch {
    return defaultValue;
  }
}

function saveJSON(filePath, data) {
  fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
}

function loadUsers() {
  return loadJSON(USERS_FILE, {});
}

function saveUsers(users) {
  saveJSON(USERS_FILE, users);
}

function loadJackpot() {
  return loadJSON(JACKPOT_FILE, { amount: 0 });
}

function saveJackpot(jackpot) {
  saveJSON(JACKPOT_FILE, jackpot);
}

// ==================== C·∫§U H√åNH C√Å ==================== //
const fishTypes = [
  { emoji: "üêü", name: "C√° Nh·ªè", chance: 25, multiplier: 1.5 },
  { emoji: "üê†", name: "C√° Trung", chance: 20, multiplier: 2 },
  { emoji: "üê≥", name: "C√° L·ªõn", chance: 15, multiplier: 4 },
  { emoji: "üêã", name: "C√° Kh·ªßng", chance: 5, multiplier: 8 },
  { emoji: "üíÄ", name: "M√¨n N·ªï", chance: 35, multiplier: 0 },
];

// Random lo·∫°i c√° theo t·ª∑ l·ªá x√°c su·∫•t
function randomFish() {
  const total = fishTypes.reduce((sum, fish) => sum + fish.chance, 0);
  const rand = Math.random() * total;
  let acc = 0;

  for (const fish of fishTypes) {
    acc += fish.chance;
    if (rand < acc) return fish;
  }
  return fishTypes[0];
}

// ==================== COMMAND ==================== //
module.exports = {
  data: new SlashCommandBuilder()
    .setName("banca")
    .setDescription("üé£ B·∫Øn c√° ƒë·ªÉ ki·∫øm coins v·ªõi hi·ªáu ·ª©ng chuy·ªÉn ƒë·ªông!")
    .addIntegerOption(opt =>
      opt.setName("bet")
        .setDescription("S·ªë coins c∆∞·ª£c cho m·ªói ph√°t b·∫Øn (>= 10)")
        .setRequired(true)
        .setMinValue(10)
    )
    .addIntegerOption(opt =>
      opt.setName("shots")
        .setDescription("S·ªë ph√°t b·∫Øn (1-5)")
        .setRequired(true)
        .setMinValue(1)
        .setMaxValue(5)
    ),

  async execute(interaction) {
    const userId = interaction.user.id;
    const username = interaction.user.username;

    const users = loadUsers();
    const jackpot = loadJackpot();

    // Kh·ªüi t·∫°o t√†i kho·∫£n n·∫øu ch∆∞a c√≥
    if (!users[userId]) {
      users[userId] = { coins: 1000, lastDaily: null };
      saveUsers(users);
    }

    const bet = interaction.options.getInteger("bet", true);
    const shots = interaction.options.getInteger("shots", true);
    const shotsClamped = Math.max(1, Math.min(5, shots));
    const totalCost = bet * shotsClamped;

    const balanceBefore = users[userId].coins;

    // Ki·ªÉm tra ƒë·ªß ti·ªÅn
    if (balanceBefore < totalCost) {
      return interaction.reply({
        content: `‚ùå B·∫°n c·∫ßn **${totalCost}** coins cho ${shotsClamped} ph√°t b·∫Øn.\nüí≥ S·ªë d∆∞ hi·ªán t·∫°i: **${balanceBefore}**`,
        ephemeral: true,
      });
    }

    // Tr·ª´ ti·ªÅn c∆∞·ª£c ngay khi b·∫Øt ƒë·∫ßu
    users[userId].coins -= totalCost;
    saveUsers(users);

    const jackpotBefore = jackpot.amount;
    let totalWin = 0;             // T·ªïng ti·ªÅn th·∫Øng t·ª´ t·∫•t c·∫£ c√°
    const perShotLines = [];

    // ==================== EMBED BAN ƒê·∫¶U ==================== //
    const embed = new EmbedBuilder()
      .setTitle("üé£ B·∫ÆN C√Å B·∫ÆT ƒê·∫¶U!")
      .setColor("Yellow")
      .setDescription(
        [
          `üë§ Ng∆∞·ªùi ch∆°i: **${username}**`,
          `üí≥ S·ªë d∆∞ tr∆∞·ªõc: **${balanceBefore}**`,
          `üéØ C∆∞·ª£c/Ph√°t: **${bet}**, üî´ S·ªë ph√°t: **${shotsClamped}**`,
          `üè¶ Jackpot hi·ªán t·∫°i: **${jackpotBefore}**`,
          "",
          `‚è≥ Chu·∫©n b·ªã b·∫Øn...`
        ].join("\n")
      );

    const gameMessage = await interaction.reply({ embeds: [embed], fetchReply: true });

    // ==================== X·ª¨ L√ù M·ªñI PH√ÅT ==================== //
    for (let i = 1; i <= shotsClamped; i++) {
      // Hi·ªáu ·ª©ng c√° b∆°i
      const swimFrames = [
        "üåä ~ üêü",
        "üåä ~~ üêü",
        "üåä ~~~ üêü"
      ];

      for (let frame of swimFrames) {
        embed.setDescription(
          [
            `üë§ Ng∆∞·ªùi ch∆°i: **${username}**`,
            `üéØ C∆∞·ª£c/Ph√°t: **${bet}**, üî´ S·ªë ph√°t: **${shotsClamped}**`,
            "",
            `üìã **K·∫øt qu·∫£ ƒëi sƒÉn:**`,
            ...perShotLines,
            "",
            `‚è≥ ƒêang b·∫Øn ph√°t ${i}/${shotsClamped}...`,
            `\`\`\`${frame}\`\`\``
          ].join("\n")
        );
        await gameMessage.edit({ embeds: [embed] });
        await new Promise(r => setTimeout(r, 400));
      }

      // Random k·∫øt qu·∫£
      const fish = randomFish();

      if (fish.emoji === "üíÄ") {
        // ======== D√çNH M√åN üíÄ ========
        const addToJackpot = Math.floor(bet * 0.30);
        jackpot.amount += addToJackpot;
        totalWin -= bet * 2; // Thua g·∫•p ƒë√¥i ti·ªÅn c∆∞·ª£c

        perShotLines.push(
          `${i}. ${fish.emoji} **${fish.name}** ‚Üí **-${bet * 2}** (Jackpot +${addToJackpot})`
        );

      } else {
        // ======== C√Å TR√öNG TH∆Ø·ªûNG ========
        let win = Math.floor(bet * fish.multiplier);

        // N·∫øu tr√∫ng c√° kh·ªßng, c·ªông Jackpot tr·ª±c ti·∫øp
        if (fish.emoji === "üêã" && jackpot.amount > 0) {
          win += jackpot.amount;
          jackpot.amount = 0;
        }

        totalWin += win;

        perShotLines.push(
          `${i}. ${fish.emoji} **${fish.name}** ‚Üí +${win} (x${fish.multiplier}${fish.emoji === "üêã" ? " + Jackpot" : ""})`
        );
      }

      // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ nh√¨n r√µ t·ª´ng ph√°t
      await new Promise(r => setTimeout(r, 800));
    }

    // ==================== HO√ÄN T·∫§T & T√çNH K·∫æT QU·∫¢ ==================== //
    const net = totalWin - totalCost; // L√£i/L·ªó c√≥ th·ªÉ √¢m

    // C·ªông s·ªë ti·ªÅn th·∫Øng cu·ªëi c√πng v√†o t√†i kho·∫£n
    users[userId].coins += totalWin;
    saveUsers(users);
    saveJackpot(jackpot);

    const color = net >= 0 ? "Green" : "Red";

    embed.setTitle("üé£ K·∫æT QU·∫¢ CU·ªêI C√ôNG")
      .setColor(color)
      .setDescription(
        [
          `üë§ Ng∆∞·ªùi ch∆°i: **${username}**`,
          `üí≥ S·ªë d∆∞ tr∆∞·ªõc: **${balanceBefore}**`,
          `üè¶ Jackpot tr∆∞·ªõc l∆∞·ª£t: **${jackpotBefore}**`,
          "",
          `üìã **K·∫øt qu·∫£ t·ª´ng ph√°t:**`,
          ...perShotLines,
          "",
          `üêü T·ªïng th·∫Øng t·ª´ c√°: **${totalWin}**`,
          `üí∞ T·ªïng ƒë√£ c∆∞·ª£c: **${totalCost}**`,
          `üßÆ L√£i/L·ªó: **${net >= 0 ? "+" : ""}${net}**`,
          `üè¶ Jackpot hi·ªán t·∫°i: **${jackpot.amount}**`,
          `üì• S·ªë d∆∞ sau: **${users[userId].coins}**`,
        ].join("\n")
      );

    await gameMessage.edit({ embeds: [embed] });
  },
};
