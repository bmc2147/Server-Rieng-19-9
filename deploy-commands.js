const { REST, Routes } = require("discord.js");
const fs = require("fs");
const path = require("path");
require("dotenv").config();

// ====================== ƒê·ªåC FILE L·ªÜNH ======================
const commands = [];
const commandFiles = fs.readdirSync("./commands").filter(file => file.endsWith(".js"));

const names = new Map();
const duplicates = [];

for (const file of commandFiles) {
    const command = require(path.join(__dirname, "commands", file));

    if (command.data) {
        const name = command.data.name;

        // Ki·ªÉm tra tr√πng t√™n l·ªánh
        if (names.has(name)) {
            duplicates.push({
                name,
                oldFile: names.get(name),
                newFile: file
            });

            // Xo√° l·ªánh c≈© tr∆∞·ªõc khi th√™m l·ªánh m·ªõi
            const index = commands.findIndex(cmd => cmd.name === name);
            if (index !== -1) commands.splice(index, 1);
        }

        names.set(name, file);
        commands.push(command.data.toJSON());
    } else {
        console.warn(`‚ùå File ${file} kh√¥ng c√≥ "command.data"`);
    }
}

// ====================== REPORT ======================
console.log("\n================= B√ÅO C√ÅO L·ªÜNH =================");
console.log("T·ªïng s·ªë file l·ªánh ƒë·ªçc ƒë∆∞·ª£c:", commandFiles.length);
console.log("T·ªïng s·ªë l·ªánh h·ª£p l·ªá (sau khi x·ª≠ l√Ω):", commands.length);

if (duplicates.length > 0) {
    console.log("\n‚ö†Ô∏è  PH√ÅT HI·ªÜN L·ªÜNH TR√ôNG:");
    duplicates.forEach(d => {
        console.log(`   - "${d.name}": ${d.oldFile} ‚ùå b·ªã ghi ƒë√® b·ªüi ‚úÖ ${d.newFile}`);
    });
} else {
    console.log("\nüéâ Kh√¥ng c√≥ l·ªánh tr√πng!");
}

console.log("\n‚úÖ DANH S√ÅCH L·ªÜNH H·ª¢P L·ªÜ:");
commands.forEach(cmd => console.log("   -", cmd.name));
console.log("=================================================\n");

// ====================== DEBUG ENV ======================
console.log("üîë Debug ENV:");
console.log("   TOKEN      =", process.env.TOKEN ? "‚úÖ Loaded" : "‚ùå NOT FOUND");
console.log("   CLIENT_ID  =", process.env.CLIENT_ID || "‚ùå NOT FOUND");
console.log("   GUILD_ID   =", process.env.GUILD_ID || "‚ùå NOT FOUND");
// ======================================================

const rest = new REST({ version: "10" }).setToken(process.env.TOKEN);

(async () => {
    try {
        // CH·ªà deploy v√†o GUILD
        console.log("‚è≥ Deploy GUILD slash commands...");
        await rest.put(
            Routes.applicationGuildCommands(process.env.CLIENT_ID, process.env.GUILD_ID),
            { body: commands }
        );
        console.log("üè† Slash commands ƒë√£ ƒë∆∞·ª£c deploy v√†o GUILD (update ngay)!");
    } catch (error) {
        console.error("‚ùå L·ªói khi deploy:", error);
        console.error("üì° API Error chi ti·∫øt:", error.rawError || error);
    }
})();
